// API endpoint –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
export default async function handler(req, res) {
  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type');

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ preflight –∑–∞–ø—Ä–æ—Å–∞
  if (req.method === 'OPTIONS') {
    return res.status(200).end();
  }

  // –¢–æ–ª—å–∫–æ POST –∑–∞–ø—Ä–æ—Å—ã
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  try {
    const { orderData, type = 'new_order' } = req.body;

    if (!orderData) {
      return res.status(400).json({ error: 'Order data is required' });
    }

    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Telegram
    const TELEGRAM_CONFIG = {
      // –í–∞—à –ª–∏—á–Ω—ã–π Chat ID
      chatId: '594704789',
      // –î–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ä–µ–∂–∏–º–∞ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ–∏–∫—Ç–∏–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      isTestMode: true // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ false
    };

    // –í —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if (TELEGRAM_CONFIG.isTestMode) {
      console.log('üì± TELEGRAM NOTIFICATION (TEST MODE):');
      console.log('Order ID:', orderData.id);
      console.log('Customer:', orderData.customer);
      console.log('Phone:', orderData.phone);
      console.log('Total:', orderData.finalTotal);
      console.log('Status:', orderData.status);
      
      return res.status(200).json({
        success: true,
        message: 'Notification sent (test mode)',
        testMode: true
      });
    }

    // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
    let message = '';
    
    if (type === 'new_order') {
      message = `üÜï *–ù–û–í–´–ô –ó–ê–ö–ê–ó #${orderData.id}*

üë§ *–ö–ª–∏–µ–Ω—Ç:* ${orderData.customer}
üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${orderData.phone}
${orderData.email ? `üìß *Email:* ${orderData.email}\n` : ''}

üìç *–ê–¥—Ä–µ—Å:* ${orderData.deliveryType === 'delivery' ? orderData.address : '–°–∞–º–æ–≤—ã–≤–æ–∑'}

üõí *–ó–∞–∫–∞–∑:*
${orderData.items.map(item => `‚Ä¢ ${item.name} x${item.quantity} - ${item.price * item.quantity} ‚ÇΩ`).join('\n')}

üí∞ *–°—É–º–º–∞:* ${orderData.finalTotal} ‚ÇΩ
üí≥ *–û–ø–ª–∞—Ç–∞:* ${orderData.paymentMethod === 'cash' ? '–ù–∞–ª–∏—á–Ω—ã–µ' : '–ö–∞—Ä—Ç–∞'}
${orderData.notes ? `üìù *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* ${orderData.notes}\n` : ''}

‚è∞ *–í—Ä–µ–º—è –∑–∞–∫–∞–∑–∞:* ${new Date(orderData.createdAt).toLocaleString('ru-RU')}

üîó *–ü–µ—Ä–µ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É:* https://tomyangbar.vercel.app/admin`;
    } else if (type === 'status_update') {
      message = `üìã *–û–ë–ù–û–í–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê #${orderData.id}*

üë§ *–ö–ª–∏–µ–Ω—Ç:* ${orderData.customer}
üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${orderData.phone}

üîÑ *–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:* ${getStatusText(orderData.status)}
‚è∞ *–í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:* ${new Date().toLocaleString('ru-RU')}

üîó *–ü–µ—Ä–µ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É:* https://tomyangbar.vercel.app/admin`;
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –Ω–∞—à API endpoint
    try {
      const sendResponse = await fetch(`${req.headers.origin || 'http://localhost:3000'}/api/telegram/send-message`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: message,
          type: type
        })
      });

      if (!sendResponse.ok) {
        const errorData = await sendResponse.json();
        console.error('Failed to send message:', errorData);
        
        return res.status(500).json({
          error: 'Failed to send Telegram notification',
          details: errorData.details || 'Unknown error'
        });
      }

      const telegramResult = await sendResponse.json();
      console.log('Telegram notification sent:', telegramResult);

      return res.status(200).json({
        success: true,
        message: 'Notification sent successfully',
        telegramMessageId: telegramResult.result?.message_id
      });
    } catch (sendError) {
      console.error('Error sending message:', sendError);
      
      return res.status(500).json({
        error: 'Failed to send Telegram notification',
        details: sendError.message
      });
    }

  } catch (error) {
    console.error('Telegram notification error:', error);
    return res.status(500).json({
      error: 'Internal server error',
      message: error.message
    });
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å—Ç–∞—Ç—É—Å–∞
function getStatusText(status) {
  switch (status) {
    case 'pending': return '‚è≥ –û–∂–∏–¥–∞–µ—Ç';
    case 'preparing': return 'üë®‚Äçüç≥ –ì–æ—Ç–æ–≤–∏—Ç—Å—è';
    case 'delivering': return 'üöö –î–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è';
    case 'completed': return '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω';
    case 'cancelled': return '‚ùå –û—Ç–º–µ–Ω–µ–Ω';
    default: return '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  }
}
