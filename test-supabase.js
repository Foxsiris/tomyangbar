// –¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase
// –í—ã–ø–æ–ª–Ω–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞

import { supabase } from './src/config/supabase.js';

console.log('üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Supabase...');

// –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
console.log('Supabase URL:', supabase.supabaseUrl);
console.log('Supabase Key:', supabase.supabaseKey ? '–ï—Å—Ç—å' : '–ù–µ—Ç');

// –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
async function testTables() {
  try {
    console.log('üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã...');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const { data: categories, error: catError } = await supabase
      .from('categories')
      .select('*')
      .limit(5);
    
    if (catError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', catError);
    } else {
      console.log('‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏:', categories);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª—é–¥–∞
    const { data: dishes, error: dishError } = await supabase
      .from('dishes')
      .select('*')
      .limit(5);
    
    if (dishError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –±–ª—é–¥:', dishError);
    } else {
      console.log('‚úÖ –ë–ª—é–¥–∞:', dishes);
    }
    
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
  }
}

testTables();
